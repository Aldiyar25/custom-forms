datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RoleType {
  USER
  ADMIN
}

enum QuestionType {
  TEXT
  LONG_TEXT
  NUMBER
  CHECKBOX
}

enum Theme {
  PERSONAL
  BUSINESS
  EDUCATION
  HEALTH
  OTHER
}

model User {
  id              Int              @id @default(autoincrement())
  username        String           @unique
  email           String           @unique
  password        String
  role            RoleType         @default(USER)
  isBlocked       Boolean          @default(false)
  createdAt       DateTime         @default(now())
  templates       Template[]
  templateAccess  TemplateAccess[]
  comments        Comment[]
  likes           Like[]
  formSubmissions Form[]
}

model Template {
  id              Int              @id @default(autoincrement())
  title           String
  description     String
  content         String
  theme           Theme
  imageUrl        String?
  isPublic        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  author          User             @relation(fields: [authorId], references: [id])
  authorId        Int
  questions       Question[]
  tags            Tag[]
  allowedUsers    TemplateAccess[]
  comments        Comment[]
  likes           Like[]
  formSubmissions Form[]
}

model Question {
  id         Int          @id @default(autoincrement())
  text       String
  type       QuestionType
  order      Int
  template   Template     @relation(fields: [templateId], references: [id])
  templateId Int
  options    Option[]
  answers    Answer[]
}

model Option {
  id         Int      @id @default(autoincrement())
  text       String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
}

model Comment {
  id         Int      @id @default(autoincrement())
  text       String
  createdAt  DateTime @default(now())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  template   Template @relation(fields: [templateId], references: [id])
  templateId Int
}

model Like {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  template   Template @relation(fields: [templateId], references: [id])
  templateId Int

  @@unique([userId, templateId])
}

model TemplateAccess {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  template   Template @relation(fields: [templateId], references: [id])
  templateId Int

  @@unique([userId, templateId])
}

model Form {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  template    Template @relation(fields: [templateId], references: [id])
  templateId  Int
  submittedAt DateTime @default(now())
  answers     Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  form       Form     @relation(fields: [formId], references: [id])
  formId     Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answerText String
}

model Tag {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  templates Template[]
}
